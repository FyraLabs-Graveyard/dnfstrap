#!/bin/bash

# DNFStrap - A script to bootstrap an Ultramarine Linux system
# Basically Anaconda but without the fancy stuff, and even more customizable


# Fancy ASCII art

# check for root access
if [ "$(id -u)" != "0" ]; then
  echo "This script must be run as root" 1>&2
  exit 1
fi

# check for interrupts, then clean up and exit
trap 'echo "Interrupted by user. Cleaning up...";
      umount -l $2/dev;
      umount -l $2/proc;
      umount -l $2/sys;
      umount -l $2/etc/resolv.conf
      exit 1' INT TERM KILL

echo " ______   ___   __    ______   ______   _________  ______    ________   ______    "
echo "/_____/\\ /__/\\ /__/\\ /_____/\\ /_____/\\ /________/\\/_____/\\  /_______/\\ /_____/\\   "
echo "\\:::_ \\ \\\\::\\_\\\\  \\ \\\\::::_\\/_\\::::_\\/_\\__.::.__\\/\\:::_ \\ \\ \\::: _  \\ \\\\:::_ \\ \\  "
echo " \\:\\ \\ \\ \\\\:. \`-\\  \\ \\\\:\\/___/\\\\:\\/___/\\  \\::\\ \\   \\:(_) ) )_\\::(_)  \\ \\\\:(_) \\ \\ "
echo "  \\:\\ \\ \\ \\\\:. _    \\ \\\\:::._\\/ \\_::._\\:\\  \\::\\ \\   \\: __ \`\\ \\\\:: __  \\ \\\\: ___\\/ "
echo "   \\:\\/.:| |\\. \\\`-\\  \\ \\\\:\\ \\     /____\\:\\  \\::\\ \\   \\ \\ \`\\ \\ \\\\:.\\ \\  \\ \\\\ \\ \\   "
echo "    \\____/_/ \\__\\/ \\__\\/ \\_\\/     \\_____\\/   \\__\\/    \\_\\/ \\_\\/ \\__\\/\\__\\/ \\_\\/   "
echo "                                                                                  "
echo ""
echo "DNFStrap - Install Fedora / Ultramarine and pretend you're using Arch Linux!"


if [ -z "$1" ]; then
  echo "Usage: dnfstrap [releasever] [chroot_dir] [extra_packages]"
  exit 1
fi
if [ -z "$2" ]; then
  echo "Usage: dnfstrap [releasever] [chroot_dir] [extra_packages]"
  exit 1
fi

## Distro Checker ##
if [ ! -f /usr/bin/dnf ]; then
  # check the distro
  if [ -f /etc/os-release ]; then
  # check if user's running arch btw
    if [ $(cat /etc/os-release | grep -c "ARCH_BASED") -eq 1 ]; then
      echo "It seems like you use Arch BTW, Do you want to install DNF? (y/n)"
      read -r answer
      if [ "$answer" = "y" ]; then
        pacman -Syu dnf
      else
        echo "You need to install DNF to use this script!"
        exit 1
      fi
    fi
    # check if user has APT (Debian or Ubuntu)
    if [ -f /usr/bin/apt ]; then
      echo "It seems like you use Debian or Ubuntu, Do you want to install DNF? (y/n)"
      read -r answer
      if [ "$answer" = "y" ]; then
        apt-get update
        apt-get install dnf
      else
        echo "You need to install DNF to use this script!"
        exit 1
      fi
    fi
    else
      echo "We can't determine your distro, please install DNF manually!"
      exit 1
  fi
fi



# check SELinux status
if [ -f /etc/selinux/config ]; then
  if [ $(grep -c "SELINUX=enforcing" /etc/selinux/config) -eq 1 ]; then
    echo "SELinux detected, setting to permissive mode"
    setenforce 0
  fi
fi

read -p 'Would you like to start the bootstrapping process? (y/n) ' yn
case $yn in
  [Yy]* ) continue;;
  [Nn]* ) exit;;
  * ) echo "Please answer yes or no.";;
esac
dnf -y --releasever $1\
 --installroot $2\
 --setopt=install_weak_deps=False\
 --setopt=reposdir=$PWD/repos\
 --exclude=fedora-release*\
 --nogpgcheck\
  install @core ultramarine-release-basic NetworkManager $3

echo "Setting up mount points..."
touch $2/etc/resolv.conf
mount --bind /etc/resolv.conf $2/etc/resolv.conf
mount --bind /dev $2/dev
mount --bind /proc $2/proc
mount --bind /sys $2/sys

echo "Would you like to install the GRUB bootloader? (y/n)"
read -r installgrub
if [ "$installgrub" = "y" ]; then
  chroot $2 dnf install -yq grub2-efi-x64 grub2-tools grub2-pc grub2-tools-efi grub2-tools-extra
fi

echo "Would you like to install the kernel? (y/n)"
read -r installkernel
if [ "$installkernel" = "y" ]; then
  # ask the user for which kernel to install
  PS3="Please enter the kernel version you would like to install: "
  options=(
    'Vanilla'
    'XanMod'
    'Liqorix (Zen)'
    'PatrickL (futex2)'
  )
  select opt in "${options[@]}"; do
    case "$REPLY" in
      "Vanilla")
        echo "Installing Torvalds' kernel"
        chroot $2 dnf install -y kernel
        break
        ;;
      "XanMod")
        echo "Installing XanMod kernel"
        dnf copr enable -yq rmnscnce/kernel-xanmod fedora-$1-$(uname -m)
        chroot $2 dnf install -y kernel-xanmod-edge
        break
        ;;
      "Liqorix (Zen)")
        echo "Installing Liqorix kernel"
        dnf copr enable -yq rmnscnce/kernel-lqx fedora-$1-$(uname -m)
        chroot $2 dnf install -y kernel-lqx
        break
        ;;
      "PatrickL (futex2)")
        echo "Installing Patrick Laimbock's kernel"
        dnf copr enable -yq patrickl/kernel
        chroot $2 dnf install -y kernel --disablerepo fedora --disablerepo fedora-updates
        ;;
      *) echo "Invalid option. Please try again."; continue;;
    esac
  done
fi


# if installgrub and installkernel are both y, then automatically set up the grub config
if [ "$installgrub" = "y" ] && [ "$installkernel" = "y" ]; then
  # Get the disk the root partition is on
  rootdisk=$(df -P . | sed -n '$s/[[:blank:]].*//p')
  # check the filesystem type of the root partition
  rootfs=$(blkid -o value -s TYPE $rootdisk)
  # Generate FSTAB
  echo "Generating File System Table..."
  # check if the root partition is on a btrfs filesystem
  if [ "$rootfs" = "btrfs" ]; then
    echo "BTRFS detected, setting up BTRFS filesystem"
    # get the subvolume name of the root partition
    rootvol=$(btrfs subvolume list $rootdisk | grep -oP 'id [0-9]+\s+path\s+\K[^\s]+')
    # generate the fstab
    echo "UUID=$(blkid -o value -s UUID $rootdisk) / btrfs subvolume=$rootvol 0 0" > $2/etc/fstab
  else # if the root partition is not on a btrfs filesystem
    # generate the fstab
    echo "UUID=$(blkid -o value -s UUID $rootdisk) / ext4 defaults 0 0" > $2/etc/fstab
  fi


  # Check if the EFI partition is present and mounted
  if [ -d $2/boot/efi ]; then
    # Add the EFI partition to the FSTAB
    efidisk=$(df -P $2/boot/efi | sed -n '$s/[[:blank:]].*//p')
    echo "Detected EFI partition on $efidisk, adding to the table..."
    echo "UUID=$(blkid -o value -s UUID $efidisk) /boot/efi vfat defaults 0 0" >> $2/etc/fstab
  fi
  # now update root UUID in the entries
  echo "Updating GRUB bootloader entries..."
  chroot $2 grubby --remove-args="root" --update-kernel ALL
  chroot $2 grubby --add-args="root=UUID=$(blkid -o value -s UUID $rootdisk)" --update-kernel ALL

fi

# ask if we want to make a user
echo "Would you like to create a new admin user? (y/n)"
read user_answer
if [ "$user_answer" == "y" ]; then
    echo "Please enter a username for the new user:"
    read username
    chroot $2 useradd -m -G wheel -s /bin/bash $username
    chroot $2 passwd $username
else
    echo "Skipping user creation. Root will be the only user, this is very insecure."
    chroot $2 passwd root
fi

# Ask if the user would like to chroot into the system
echo "Would you like to chroot into the system now? (y/n)"
read chroot
if [ "$chroot" == "y" ]; then
    echo "Entering chroot..."
    chroot $2
fi

echo "Cleaning up mount points..."
umount -l $2/dev
umount -l $2/proc
umount -l $2/sys
umount -l $2/etc/resolv.conf
echo "Installation complete."