#!/bin/bash

# DNFStrap - A script to bootstrap an Ultramarine Linux system
# Basically Anaconda but without the fancy stuff, and even more customizable


# Fancy ASCII art

# check for root access
#if [ "$(id -u)" != "0" ]; then
#  echo "This script must be run as root" 1>&2
#  exit 1
#fi

echo " ______   ___   __    ______   ______   _________  ______    ________   ______    "
echo "/_____/\\ /__/\\ /__/\\ /_____/\\ /_____/\\ /________/\\/_____/\\  /_______/\\ /_____/\\   "
echo "\\:::_ \\ \\\\::\\_\\\\  \\ \\\\::::_\\/_\\::::_\\/_\\__.::.__\\/\\:::_ \\ \\ \\::: _  \\ \\\\:::_ \\ \\  "
echo " \\:\\ \\ \\ \\\\:. \`-\\  \\ \\\\:\\/___/\\\\:\\/___/\\  \\::\\ \\   \\:(_) ) )_\\::(_)  \\ \\\\:(_) \\ \\ "
echo "  \\:\\ \\ \\ \\\\:. _    \\ \\\\:::._\\/ \\_::._\\:\\  \\::\\ \\   \\: __ \`\\ \\\\:: __  \\ \\\\: ___\\/ "
echo "   \\:\\/.:| |\\. \\\`-\\  \\ \\\\:\\ \\     /____\\:\\  \\::\\ \\   \\ \\ \`\\ \\ \\\\:.\\ \\  \\ \\\\ \\ \\   "
echo "    \\____/_/ \\__\\/ \\__\\/ \\_\\/     \\_____\\/   \\__\\/    \\_\\/ \\_\\/ \\__\\/\\__\\/ \\_\\/   "
echo "                                                                                  "
echo ""
echo "DNFStrap - Fedora, the hard way"
echo "A bash script replacement for the Anaconda installer"
echo ""

# Arguments
usage(){
  echo "usage $0 [options]"
  echo "  -h, --help              Show this help message and exit"
  echo "  -c, --chroot            Set chroot directory"
  echo "  -d, --device            Set block device to automatically format (DANGEROUS)"
  echo "  -r, --release           Set release version"
  echo "  -e, --enter-only        Only enter chroot and exit, only works with a standard DNFStrap install"
}

# Parse arguments
while [ "$1" != "" ]; do
  case $1 in
    -h | --help ) usage
                  exit
                  ;;
    -c | --chroot ) shift
                  CHROOT=$1
                  ;;
    -d | --device ) shift
                  DEVICE=$1
                  ;;
    -r | --release ) shift
                  RELEASE=$1
                  ;;
    # -i can be defined multiple times
    -i | --installpkgs ) shift
                  INSTALLPKGS="$INSTALLPKGS $1"
                  ;;
    -p | --pkglist ) shift
                  # pkglist is a file containing a list of packages to install seperated by newlines, so we join them with spaces
                  INSTALLPKGS="$INSTALLPKGS $(cat $1)"
                  ;;
    -e | --enter-only )
                  ENTER_ONLY=1
                  ;;
    --dry ) DRY=1
          ;;
    * ) usage
        exit 1
  esac
  shift
done

# if enter-only is set, simply enter the chroot
if [ "$ENTER_ONLY" == "1" ]; then
  # check if the device is an nvme device
  if [ -z "$DEVICE" ]; then
    echo "Device not defined"
    exit 1
  fi
  # let's create the mountpoint
  mkdir -p /mnt/sysroot
  export CHROOT=/mnt/sysroot
  # check if the device is an nvme device
  if [ "$(echo $DEVICE | grep -o nvme)" == "nvme" ]; then
    # NVMe devices are special, it's formatted differently as nvme0n1pX
    mount /dev/$(echo $DEVICE)p2 /mnt/sysroot
    mkdir -p /mnt/sysroot/boot/efi
    mount /dev/$(echo $DEVICE)p1 /mnt/sysroot/boot/efi
  else
    # just mount it normally
    mount $(echo $DEVICE)2 /mnt/sysroot
    mkdir -p /mnt/sysroot/boot/efi
    mount $(echo $DEVICE)1 /mnt/sysroot/boot/efi
  fi
  # now we set up the chroot
  echo "Setting up mount points..."
  touch $CHROOT/etc/resolv.conf
  mount --bind /etc/resolv.conf $CHROOT/etc/resolv.conf
  mount --bind /dev $CHROOT/dev
  mount --bind /proc $CHROOT/proc
  mount --bind /sys $CHROOT/sys
  # now we enter the chroot

  # oh also, trap to clean up if something goes wrong
  trap 'echo "Interrupted by user. Cleaning up...";
      umount -l $CHROOT/dev;
      umount -l $CHROOT/proc;
      umount -l $CHROOT/sys;
      umount -l $CHROOT/etc/resolv.conf
      exit 1' INT TERM KILL


  echo "Entering chroot..."
  chroot $CHROOT
  # now clean up the mounts after we're done
  echo "Cleaning up mounts..."
  umount $CHROOT/etc/resolv.conf
  umount $CHROOT/dev
  umount $CHROOT/proc
  umount $CHROOT/sys
  exit 0
fi



# Require release argument
if [ -z "$RELEASE" ]; then
  echo "Please specify a release version"
  exit 1
fi

# if device and chroot are set, then error
if [ ! -z "$DEVICE" ] && [ ! -z "$CHROOT" ]; then
  echo "Please specify either a device or a chroot directory, not both"
  exit 1
fi

if [ ! -z "$CHROOT" ]; then
  # Check if chroot directory exists
  if [ ! -d "$CHROOT" ]; then
    echo "Chroot directory does not exist"
    exit 1
  fi
fi

# if device is set, then format it
if [ ! -z "$DEVICE" ]; then
  # calculate the partitions
  # 100MB EFI partition
  # everything else is /

  # make the layout
  # get the whole disk size in megabytes
  DISKSIZE=$(fdisk -l $DEVICE | grep Disk | awk '{print $5}')
  # these are in bytes, so convert to gigabytes
  HDISKSIZE=$(($DISKSIZE / 1024 / 1024 / 1024))
  # calculate the partition sizes
  # the ESP Size will always be 100MB so we can turn it into bytes
  ESPSIZE=104857600
  # the rest of the disk is the root partition
  ROOTSIZE=$(($DISKSIZE - $ESPSIZE))
  # human readable sizes
  HESPSIZE=$(($ESPSIZE / 1024 / 1024))
  HROOTSIZE=$(($ROOTSIZE / 1024 / 1024))
  echo "Block device is selected, showing partition layout"
  echo "============================================================"
  echo ""
  echo "ESP size: $HESPSIZE M"
  echo "ROOT size: $HROOTSIZE M"
  echo ""
  #exit
  # ask if you really want to format the device
  read -p "This will Format $DEVICE, All data will be LOST! are you REALLY sure? (y/N) " -n 1 -r yn
  case $yn in
  [Yy]* ) echo " Formatting $DEVICE..."
          # wipe the device
          echo " Wiping $DEVICE..."
          dd if=/dev/zero of=$DEVICE bs=1M count=1
          # create the partitions
          echo " Creating partitions..."
          # create the ESP partition
          parted -s $DEVICE mklabel msdos
          parted -s $DEVICE mkpart primary fat32 0 $HESPSIZE
          # Now create the root partition next to the ESP partition
          parted -s $DEVICE mkpart primary ext4 $HESPSIZE $HROOTSIZE
          # set the ESP partition to bootable
          parted -s $DEVICE set 1 boot on
          # format the partitions
          echo " Formatting partitions..."
          # check if it's an nvme device
          if [ "$(echo $DEVICE | grep nvme)" ]; then
            # nvme devices need a special format
            mkfs.vfat -F32 -n ESP $DEVICE"p1"
            mkfs.ext4 -F -L root $DEVICE"p2"
            PART="$DEVICE"p
          else
            mkfs.vfat -F32 -n ESP $DEVICE"1"
            mkfs.ext4 -F -L root $DEVICE"2"
            PART="$DEVICE"
          fi
          echo " Mounting partitions to /mnt/sysroot..."
          # mount the partitions
          mkdir -p /mnt/sysroot
          mount $PART"2" /mnt/sysroot
          mkdir -p /mnt/sysroot/boot/efi
          mount $PART"1" /mnt/sysroot/boot/efi
          export CHROOT=/mnt/sysroot
          ;;
  [Nn]* ) echo " Exiting..."
          exit
          ;;
  * ) echo " Invalid answer, assuming no"
      echo "Exiting..."
      exit
      ;;

  esac
fi


#exit

## Distro Checker ##
if [ ! -f /usr/bin/dnf ]; then
  # check the distro
  if [ -f /etc/os-release ]; then
  # check if user's running arch btw
    if [ $(cat /etc/os-release | grep -c "ARCH_BASED") -eq 1 ]; then
      echo "It seems like you use Arch BTW, Do you want to install DNF? (y/n)"
      read -r answer
      if [ "$answer" = "y" ]; then
        pacman -Syu dnf
      else
        echo "You need to install DNF to use this script!"
        exit 1
      fi
    fi
    # check if user has APT (Debian or Ubuntu)
    if [ -f /usr/bin/apt ]; then
      echo "It seems like you use Debian or Ubuntu, Do you want to install DNF? (y/n)"
      read -r answer
      if [ "$answer" = "y" ]; then
        apt-get update
        apt-get install dnf
      else
        echo "You need to install DNF to use this script!"
        exit 1
      fi
    fi
    else
      echo "We can't determine your distro, please install DNF manually!"
      exit 1
  fi
fi



# check SELinux status
if [ -f /etc/selinux/config ]; then
  echo "SELinux detected, setting to permissive mode"
  setenforce 0
fi

read -p 'Would you like to start the bootstrapping process? (y/n) ' yn
case $yn in
  [Yy]* ) ;;
  [Nn]* ) exit;;
  * ) echo "Please answer yes or no.";;
esac

echo "Bootstrapping with DNF..."
dnf -y --releasever $RELEASE\
 --installroot $CHROOT\
 --setopt=install_weak_deps=False\
 --setopt=reposdir=$PWD/repos\
 --nogpgcheck\
  install @core NetworkManager dbus-daemon $INSTALLPKGS

echo "Setting up mount points..."
touch $CHROOT/etc/resolv.conf
mount --bind /etc/resolv.conf $CHROOT/etc/resolv.conf
mount --bind /dev $CHROOT/dev
mount --bind /proc $CHROOT/proc
mount --bind /sys $CHROOT/sys

# check for interrupts, then clean up and exit
trap 'echo "Interrupted by user. Cleaning up...";
      umount -l $CHROOT/dev;
      umount -l $CHROOT/proc;
      umount -l $CHROOT/sys;
      umount -l $CHROOT/etc/resolv.conf
      exit 1' INT TERM KILL


echo "Would you like to install the GRUB bootloader? (y/n)"
read -r installgrub
if [ "$installgrub" = "y" ]; then
  chroot $CHROOT dnf install -y grub2-efi-x64 grub2-tools grub2-pc grub2-tools-efi grub2-tools-extra shim grubby grub2-efi-x64-modules grub2-common
fi

echo "Would you like to install the kernel? (y/n)"
read -r installkernel
if [ "$installkernel" = "y" ]; then
  # ask the user for which kernel to install
  PS3="Please enter the kernel version you would like to install: "
  options=(
    'Vanilla'
    'XanMod'
    'Liqorix (Zen)'
    'PatrickL (futex2)'
  )
  select opt in "${options[@]}"; do
    case "$REPLY" in
      "1")
        echo "Installing Torvalds' kernel"
        chroot $CHROOT dnf install -y kernel
        break
        ;;
      "2")
        echo "Installing XanMod kernel"
        dnf copr enable -y rmnscnce/kernel-xanmod fedora-35-$(uname -m)
        chroot $CHROOT dnf install -y kernel-xanmod-edge
        break
        ;;
      "3")
        echo "Installing Liqorix kernel"
        dnf copr enable -y rmnscnce/kernel-lqx fedora-35-$(uname -m)
        chroot $CHROOT dnf install -y kernel-lqx
        break
        ;;
      "4")
        echo "Installing Patrick Laimbock's kernel"
        dnf copr enable -y patrickl/kernel fedora-35-$(uname -m)
        chroot $CHROOT dnf install -y kernel
        ;;
      *) echo "Invalid option. Please try again."; continue;;
    esac
  done
fi


# if installgrub and installkernel are both y, then automatically set up the grub config
if [ "$installgrub" = "y" ] && [ "$installkernel" = "y" ]; then
  # Get the disk the root partition is on
  rootdisk=$(df -P $CHROOT | sed -n '$s/[[:blank:]].*//p')
  # check the filesystem type of the root partition
  rootfs=$(blkid -o value -s TYPE $rootdisk)
  # Generate FSTAB
  echo "Generating File System Table..."
  # check if the root partition is on a btrfs filesystem
  if [ "$rootfs" = "btrfs" ]; then
    echo "BTRFS detected, setting up BTRFS filesystem"
    # get the subvolume name of the root partition
    rootvol=$(btrfs subvolume list $rootdisk | grep -oP 'id [0-9]+\s+path\s+\K[^\s]+')
    # generate the fstab
    echo "UUID=$(blkid -o value -s UUID $rootdisk) / btrfs subvolume=$rootvol 0 0" > $CHROOT/etc/fstab
  else # if the root partition is not on a btrfs filesystem
    # generate the fstab
    echo "UUID=$(blkid -o value -s UUID $rootdisk) / ext4 defaults 0 0" > $CHROOT/etc/fstab
  fi


  # Check if the EFI partition is present and mounted
  if [ -d $CHROOT/boot/efi ]; then
    # Add the EFI partition to the FSTAB
    efidisk=$(df -P $CHROOT/boot/efi | sed -n '$s/[[:blank:]].*//p')
    echo "Detected EFI partition on $efidisk, adding to the table..."
    echo "UUID=$(blkid -o value -s UUID $efidisk) /boot/efi vfat defaults 0 0" >> $CHROOT/etc/fstab
  fi
  # now update root UUID in the entries
  echo "Updating GRUB bootloader entries..."
  chroot $CHROOT grubby --remove-args="root" --update-kernel ALL
  chroot $CHROOT grubby --remove-args='rd.live.image' --update-kernel ALL
  chroot $CHROOT grubby --args "root=UUID=$(blkid -o value -s UUID $rootdisk) rw quiet" --update-kernel ALL

  cp -av grub.cfg $CHROOT/boot/efi/EFI/fedora/grub.cfg
  # replace <UUID> with the UUID of the root partition
  sed -i "s/<UUID>/$(blkid -o value -s UUID $rootdisk)/g" $CHROOT/boot/efi/EFI/fedora/grub.cfg
  echo "Generating GRUB configuration..."
  chroot $CHROOT grub2-mkconfig -o /etc/grub2-efi.cfg
  chroot $CHROOT grub2-mkconfig -o /etc/grub.cfg
fi

# ask if we want to make a user
echo "Would you like to create a new admin user? (y/n)"
read user_answer
if [ "$user_answer" == "y" ]; then
    echo "Please enter a username for the new user:"
    read username
    chroot $CHROOT useradd -m -G wheel -s /bin/bash $username
    chroot $CHROOT passwd $username
else
    echo "Skipping user creation. Root will be the only user, this is very insecure."
    chroot $CHROOT passwd root
fi

# Set up the system clock
echo "Setting up the system clock..."
chroot $CHROOT timedatectl set-ntp true

# Set up the timezone
echo "Setting up the timezone..."
# ask for the timezone
echo "Please enter the timezone you would like to use: "
read timezone

# if timezone is blank use NTP
if [ -z "$timezone" ]; then
  echo "No timezone specified, using NTP"
  chroot $CHROOT timedatectl set-ntp true
else
  # set the timezone
  chroot $CHROOT ln -sf /usr/share/zoneinfo/$timezone /etc/localtime
fi

# Set up SELinux in the chroot
echo "Setting up SELinux..."
chroot $CHROOT setenforce 0
sed -i 's/^SELINUX=disabled/SELINUX=enforcing/' $CHROOT/etc/selinux/config
sed -i 's/^SELINUX=permissive/SELINUX=enforcing/' $CHROOT/etc/selinux/config
chroot $CHROOT dnf install -y policycoreutils-dbus policycoreutils-restorecond

# let's add a firstboot script
echo "Setting up firstboot script..."
cat > $CHROOT/etc/init.d/firstboot << EOF
#!/bin/bash
# dnfstrap: firstboot script
# chkconfig: 345 00 99
# description: Init script for live image.
### BEGIN INIT INFO
# X-Start-Before: network.target
### END INIT INFO

. /etc/init.d/functions

setenforce 0
sed -i 's/^SELINUX=disabled/SELINUX=enforcing/' /etc/selinux/config
sed -i 's/^SELINUX=permissive/SELINUX=enforcing/' /etc/selinux/config
restorecon -Rv /
setenforce 1
# self-destruct
chkconfig firstboot off
EOF
chmod +x $CHROOT/etc/init.d/firstboot
chroot $CHROOT restorecon /etc/init.d/firstboot
chroot $CHROOT chkconfig --add firstboot

# Set up the hostname
echo "Setting up the hostname..."
echo "Please enter the hostname you would like to use:"
read hostname
if [ -z "$hostname" ]; then
  echo "No hostname specified, using default"
  echo "dnfstrap" > $CHROOT/etc/hostname
else
  echo $hostname > $CHROOT/etc/hostname
fi

# Set up the network
echo "Setting up the network..."
# auto-configure the network
chroot $CHROOT dhclient
chroot $CHROOT systemctl enable NetworkManager
chroot $CHROOT systemctl enable systemd-resolved
chroot $CHROOT systemctl enable dbus

echo "Installation is almost complete, please check your configuration to ensure it is correct and bootable."

# Ask if the user would like to chroot into the system
echo "Would you like to chroot into the system now? (y/n)"
read chroot
if [ "$chroot" == "y" ]; then
    echo "Entering chroot..."
    chroot $CHROOT
fi

echo "Cleaning up mount points..."
umount -l $CHROOT/dev
umount -l $CHROOT/proc
umount -l $CHROOT/sys
umount -l $CHROOT/etc/resolv.conf
echo "Installation complete."